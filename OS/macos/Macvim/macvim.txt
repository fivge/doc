1.安装macvim
https://github.com/macvim-dev/macvim/releases
	1）安装 MacVim.app
	2）将mvim脚本文件拷贝到"/usr/local/bin"目录下。输入命令"mvim"快速启动MacVim 。

2.配置
1）
打开MacVim输入
:e $VIMRUNTIME/vimrc_example.vim  
:saveas ~/.vimrc  
:e $VIMRUNTIME/gvimrc_example.vim  
:saveas ~/.gvimrc 

2）
添加一些自定义内容
3.插件
1）
http://prdownloads.sourceforge.net/ctags/
	/configure
	make
	sudo make install
2）
1.下载vundle
git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle

2.写入到.vimrc中
set nocompatible               " be iMproved  
 filetype off                   " required!  
  
 set rtp+=~/.vim/bundle/vundle/  
 call vundle#rc()  
  
" let Vundle manage Vundle  
" required!   
"这是vundle本身的设置  
 Bundle 'gmarik/vundle'    
   
 " My Bundles here:  
 "这里是设置你自己自定义的插件的设置vundle设置，注意：下载的插件git为：https://github.com/godlygeek/tabular.git，则设置为Bundle 'godlygeek/tabular';https://github.com/gmarik/vundle.git设置则为 Bundle 'gmarik/vundle'    
 " original repos on github  
 Bundle 'godlygeek/tabular'  
  
 " vim-scripts repos，vim-scripts的访问地址，格式则如下：  
 Bundle 'L9'  
 Bundle 'FuzzyFinder'  
 " non github repos ，非git的访问地址的，格式如下：  
 Bundle 'git://git.wincent.com/command-t.git'  
 " ...  
  
 filetype plugin indent on     " required!  
 "  
 " Brief help  
 " :BundleList          - list configured bundles  
 " :BundleInstall(!)    - install(update) bundles  
 " :BundleSearch(!) foo - search(or refresh cache first) for foo  
 " :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles  
 "  
 " see :h vundle for more details or wiki for FAQ  
 " NOTE: comments after Bundle command are not allowed.. 

3.打开MacVim输入
安装			:BundleInstall
搜索插件		:BundleSearch matchit   
安装插件		:BundleInstall matchit.zip  
  			.vimrc中的注释" vim-scripts repos下，加入如下命令
			Bundle 'matchit.zip'  
更新插件		:BundleInstall  
列出插件列表	:BundleList  

清除插件		:BundleClean   

3）常用插件
http://blog.csdn.net/forlong401/article/details/42340883
   NERD_tree ： 一个文件管理插件，一些常用命令： 打开一个目录树( :NERDTree <启动目录> | <bookmark>  )  关闭目录树栏(:NERDTreeClose)；切换目录树栏（:NERDTreeToggle）;  定义标签（:Bookmark <name>）；定义Root标签（:BookmarkToRoot <bookmark>)。。。。。。更多命令和用法见 :help NERD_tree。
https://github.com/scrooloose/nerdtree

  word_complete  ：代码自动补全
https://github.com/vim-scripts/word_complete.vim

  SuperTab ：省去Ctrl-n或Ctrl-p快捷键，通过按tab键快速显示补全代码.
https://github.com/ervandew/supertab

  xptemplate : 快速自动完成一些if、switch、for、while结构模板代码，支持c、c++、Lua、Ruby、Php、html、css、javascript等多种语言。一般是输入结构体的关键字后，再按Ctrl-\组合键即可完成代码补全，然后按Tab键跳转到不同的位置替换模板内容。比如：输入for后按Ctrl-\组合键即可快速完成for结构的模板代码。
https://github.com/vim-scripts/xptemplate

  ctags : 一个扫描记录代码的语法元素，并记录为tag，方便代码定位跳转等操作，MacVim自带，但是据说有点问题，笔者用Vundle安装的貌似也有问题，推荐用MacPorts安装，然后在~/.gvimrc配置中加入：  let Tlist_Ctags_Cmd="/opt/local/bin/ctags"。用法：在终端 cd 进入到你的项目根目录，输入语句即可将项目所有代码文件打上tag： 
 ctags -R --c++-kinds=+px --fields=+iaS --extra=+q .

   taglist : 可以用Vundle安装，在编辑代码文件时，输入命令":TlistToggle"在右边就会出现当前类的函数或变量列表。输入命令“:tag <函数名或变量、类>”，如果只有一个文件定义了该函数或变量、类，vim打开该文件并将光标定位到对应的位置；如果多个文件有这个函数名或变量、类的tag，将给提示，并可输入“:tselect” ,显示可选的文件。快捷键跳转Ctrl+],Ctrl-o。

   Cscope :功能跟ctags差不多，不过更加强大，MacVim默认已经支持，输入“:version”命令查看.

   OmniCppComplete : 功能跟taglist差不多。 

   a.vim :在.cpp文件和.h头文件间快速切换的插件。

   grep.vim ： 在工程中查找词汇的插件。

   minibufexplorerpp : 操作缓存buffer窗口。

   quickfix ：MacVim内置安装好了，不需要重新安装。显示一些命令查询结果以及编译错误等信息。

   Command-t ：用Commad-t命令快速查找切换文件。如果是用Vundle安装的话，还不能使用，在MacVim中输入“:CommandT”命令会报错。用Vundle安装好打开终端，输入如下命令，等待编译完毕后就可以使用了：
cd ~/.vim/bundle/Command-T/ruby/command-t  
	ruby extconf.rb  
	make  

   NERD_commenter.vim ： 注释插件。

   DoxygenToolkit.vim : 用于快速生成注释，并由注释生成文档。

   winmanager ： 可以用Vundle安装，管理窗口的插件，可以跟NERD_tree、Taglist插件结合，打造一个类似IDE的界面。只需要在NERD_tree.vim中加入如下代码：
let g:NERDTree_title = "NERDTree"  
function!  NERDTree_Start()  
    exec 'NERDTree'  
endfunction  
function! NERDTree_IsValid()  
    return 1  
endfunction  
并且在winmanager.vim的找到下面代码，增加一句代码：
" toggle showing the explorer plugins.  
function! <SID>ToggleWindowsManager()  
    if IsWinManagerVisible()  
        call s:CloseWindowsManager()  
    else  
        call s:StartWindowsManager()  
        "NERDTree 打开的时候有一个空白窗口，需要关闭  
        exec 'q'  
    end  
endfunction  
最后在~/.gvimrc中加入如下配置：
"在vim左侧显示窗口Taglist和文件列表窗口  
"let g:winManagerWindowLayout='FileExplorer,BufExplorer|TagList'  
let g:winManagerWindowLayout='NERDTree, BufExplorer|TagList'  
"打开vim时自动打开winmanager  
let g:AutoOpenWinManager = 1  
"定义打开关闭winmanager的快捷键为 wt组合键命令  
nmap wt :WMToggle<cr>  
          
重启，即可看到一个类似IDE的Vim界面。

